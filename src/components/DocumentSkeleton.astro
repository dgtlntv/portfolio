---
interface MetadataItem {
    label: string
    value: string
}

export interface Props {
    lines?: number
    className?: string
    title?: string
    metadata?: MetadataItem[]
}

const { 
    lines = 12, 
    className = "", 
    title, 
    metadata = [
        { label: "Author:", value: "Design Team" },
        { label: "Date:", value: "March 2024" },
        { label: "Version:", value: "2.1" },
        { label: "Status:", value: "Final" }
    ]
} = Astro.props

const generateLines = () => {
    const lineElements = []
    
    for (let i = 0; i < lines; i++) {
        const isShort = Math.random() < 0.2
        const isMedium = Math.random() < 0.3
        const isTitle = !title && (i === 0 || (i > 0 && Math.random() < 0.15))
        
        let lineClass = "h-3 bg-gray-300 rounded"
        let width = "w-full"
        
        if (isTitle) {
            lineClass = "h-6 bg-gray-400 rounded"
            width = Math.random() < 0.5 ? "w-3/4" : "w-2/3"
        } else if (isShort) {
            width = "w-3/5"
        } else if (isMedium) {
            width = "w-4/5"
        }
        
        lineElements.push({
            key: i,
            lineClass,
            width,
            isTitle,
            needsSpace: isTitle && i > 0
        })
    }
    
    return lineElements
}

const lines_data = generateLines()
---

<div class={`not-prose bg-white border border-gray-200 shadow-sm aspect-[1/1.414] max-w-sm mx-auto rounded-lg rotate-2 ${className}`}>
    <div class="h-full flex flex-col p-8">
        <!-- Fixed header content -->
        <div class="flex-shrink-0">
            {title && (
                <div class="mb-6">
                    <h3 class="text-lg font-bold text-gray-800 mb-4">{title}</h3>
                </div>
            )}
            
            <!-- Document metadata table -->
            <div class="mb-8 border border-gray-200 rounded text-[10px] divide-y divide-gray-200">
                {metadata.map((item, index) => (
                    <div class="flex px-2 py-1">
                        <span class="w-12 text-gray-500 font-medium">{item.label}</span>
                        <span class="text-gray-800">{item.value}</span>
                    </div>
                ))}
            </div>
        </div>
        
        <!-- Scrollable content area with gradient fade -->
        <div class="flex-1 relative min-h-0">
            <div class="h-full overflow-y-auto space-y-3">
                {lines_data.map((line) => (
                    <>
                        <div
                            class={`${line.lineClass} ${line.width} ${line.isTitle ? 'mb-4' : 'mb-3'}`}
                        />
                        {line.needsSpace && (
                            <div class="mb-2" />
                        )}
                    </>
                ))}
            </div>
            <!-- Gradient fade overlay -->
            <div class="absolute top-0 left-0 right-0 h-8 bg-gradient-to-b from-white to-transparent pointer-events-none"></div>
        </div>
    </div>
</div>